"""
Gestioneaz캒 valori lips캒 탳i duplicate 칥ntr-un set de date 칥nc캒rcat.

Permite introducerea artificial캒 a valorilor NaN 탳i afi탳eaz캒 un grafic cu cele mai afectate coloane.

Verific캒 탳i raporteaz캒 r칙ndurile duplicate, oferind op탵iunea de afi탳are.
"""

import random

import numpy as np
import pandas as pd
import plotly.express as px
import streamlit as st

from nav_bar import nav_bar


st.set_page_config(page_title="Duplicate 탳i valori lips캒", page_icon="游뚿", layout="wide")
nav_bar()
st.title("Duplicate 탳i valori lips캒")
df: pd.DataFrame = st.session_state.get("df", default=None)


def introducere_valori_lipsa(df: pd.DataFrame, procent_min=0.01, procent_max=0.1):
	"""
	Introduce artificial valori lips캒 (NaN) 칥ntr-un DataFrame 칥ntr-un interval procentual specificat.

	Parametri:
	----------
	df : pd.DataFrame
	    DataFrame-ul original.
	procent_min : float, implicit 0.01
	    Procentul minim de valori lips캒 ce vor fi introduse per coloan캒.
	procent_max : float, implicit 0.1
	    Procentul maxim de valori lips캒 ce pot fi introduse per coloan캒.

	Returneaz캒:
	-----------
	pd.DataFrame
	    O copie a DataFrame-ului original cu valori lips캒 introduse aleatoriu (except칙nd coloana 'Target').
	"""
	df_copy = df.copy()
	for col in df_copy.columns:
		if col != "Target":
			procent = random.uniform(procent_min, procent_max)
			n = int(len(df_copy) * procent)
			index_to_nan = df_copy.sample(n=n).index
			df_copy.loc[index_to_nan, col] = np.nan
	return df_copy


def plot_valori_lipsa(df: pd.DataFrame):
	"""
	Afi탳eaz캒 un grafic cu cele mai afectate coloane de valori lips캒 칥ntr-un DataFrame.

	Parametri:
	----------
	df : pd.DataFrame
	    DataFrame-ul analizat pentru identificarea valorilor lips캒.

	Ce face func탵ia:
	----------------
	- Calculeaz캒 num캒rul 탳i procentul valorilor lips캒 pentru fiecare coloan캒.
	- Afi탳eaz캒 un bar chart interactiv cu primele 5 coloane cu cele mai multe valori lips캒.
	- Ignor캒 coloanele f캒r캒 valori lips캒 탳i nu afi탳eaz캒 nimic dac캒 nu exist캒 lipsuri.
	"""
	missing_vals = df.isnull().sum()
	missing_percent = (missing_vals / len(df)) * 100

	missing_df = pd.DataFrame({
		'Coloan캒': missing_vals.index,
		'Valori lips캒': missing_vals.values,
		'Procent': np.round(missing_percent.values, 3)
	})

	missing_df = missing_df[missing_df['Valori lips캒'] > 0]
	missing_df = missing_df.sort_values(by='Procent', ascending=False).head(5)

	if missing_df.empty:
		return

	fig = px.bar(
		missing_df,
		x='Procent',
		y='Coloan캒',
		color='Procent',
		color_continuous_scale='Oranges',
		title='Procentul valorilor lips캒 per coloan캒',
		labels={'Procent': 'Procent (%)', 'Coloan캒': 'Coloan캒'},
		category_orders={'Coloan캒': missing_df['Coloan캒'].tolist()}
	)

	fig.update_layout(
		xaxis_title='Procent (%)',
		yaxis_title='Coloan캒',
		height=400
	)

	st.plotly_chart(fig, use_container_width=True)


if "has_nan_values" not in st.session_state:
	st.session_state.has_nan_values = False

if df is not None:
	if not st.session_state.has_nan_values:
		if st.button("Introducere valori NaN"):
			st.session_state.df = introducere_valori_lipsa(df)
			st.session_state.has_nan_values = True
			st.warning("Am introdus artificial valori lips캒 칥n setul de date.")
	elif st.session_state.has_nan_values:
		st.warning("Am introdus artificial valori lips캒 칥n setul de date.")

	st.subheader("游닍 Cod folosit pentru a verifica valorile lips캒")
	st.code("df.isnull().sum()", language="python")

	missing = st.session_state.df.isnull().sum()
	total_missing = missing.sum()

	if total_missing == 0:
		st.success("Nu exist캒 valori lips캒.")
	else:
		st.warning(f"Exist캒 {total_missing} valori lips캒 칥n total.")
		# st.dataframe(missing[missing > 0])
		plot_valori_lipsa(st.session_state.df)

	st.subheader("游닍 Cod folosit pentru a verifica duplicatele")
	st.code("df.duplicated().sum()", language="python")

	duplicates = st.session_state.df.duplicated().sum()
	if duplicates == 0:
		st.success("Nu exist캒 r칙nduri duplicate.")
	else:
		st.warning(f"Exist캒 {duplicates} r칙nduri duplicate.")
		if st.checkbox("Afi탳eaz캒 duplicatele"):
			st.dataframe(st.session_state.df[st.session_state.df.duplicated()])
else:
	st.warning("칉ncarc캒 mai 칥nt칙i un fi탳ier CSV.")
